{"ast":null,"code":"var _jsxFileName = \"/Users/saboorali/Desktop/summer 2023/webDev/textutils/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport Test from \"./Test\";\nimport { Routes, Route } from \"react-router-dom\";\n\n// import { Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState(\"light\"); //whether dark mood unabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => setAlert(null), 1000);\n  };\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mood has been enabled\", \"success\");\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#1e0b69\";\n      showAlert(\"Dark mood has been enabled\", \"success\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"TextUtils\",\n      aboutText: \"About\",\n      mode: mode,\n      toggle: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: [\"element =\", /*#__PURE__*/_jsxDEV(TextForm, {\n          heading: \"Text to test\",\n          mode: mode,\n          Showalert: showAlert\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/about\",\n        children: [\"element = \", /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"0HOcw1k7gBoZtgDKz+uDOLkRLtw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Navbar","TextForm","About","useState","Alert","Test","Routes","Route","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","document","body","style","backgroundColor","children","title","aboutText","toggle","fileName","_jsxFileName","lineNumber","columnNumber","path","heading","Showalert","_c","$RefreshReg$"],"sources":["/Users/saboorali/Desktop/summer 2023/webDev/textutils/src/App.js"],"sourcesContent":["import \"./App.css\";\n\nimport React from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\nimport Test from \"./Test\";\nimport { Routes, Route } from \"react-router-dom\";\n\n// import { Routes, Route } from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //whether dark mood unabled or not\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => setAlert(null), 1000);\n  };\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mood has been enabled\", \"success\");\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#1e0b69\";\n      showAlert(\"Dark mood has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Router>\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About\"\n          mode={mode}\n          toggle={toggleMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/dummy\">\n              <Test />\n            </Route>\n            <Route path=\"/\">\n              <TextForm\n                heading=\"Text to test\"\n                mode={mode}\n                Showalert={showAlert}\n              />\n            </Route>\n          </Switch>\n        </div>\n        <footer id=\"customFooter\">Coded by Qazi Saboor</footer>\n      </Router> */}\n\n      <Navbar\n        title=\"TextUtils\"\n        aboutText=\"About\"\n        mode={mode}\n        toggle={toggleMode}\n      />\n      <Alert alert={alert} />\n      <Routes>\n        <Route path=\"/\">\n          element =\n          {\n            <TextForm\n              heading=\"Text to test\"\n              mode={mode}\n              Showalert={showAlert}\n            />\n          }\n        </Route>\n        <Route path=\"/about\">element = {<About />}</Route>\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}